{
  "title": "首次渲染 - 2.2 组件VNode的创建之旅",
  "steps": [
    {
      "file": "src/core/vdom/patch.js",
      "line": 144,
      "description": "开始创建",
      "title": "开始创建"
    },
    {
      "file": "src/core/vdom/patch.js",
      "line": 214,
      "description": "- isReactivated(是否是重新激活的)，因为是首次渲染所以肯定不是\n- 这行开始调用init hook。这个hook在组件[vnode创建][首次渲染 - 1.vnode的生成#9]时候加进来的\n\n接下来回到组件vnode创建的逻辑,看看",
      "selection": {
        "start": {
          "line": 213,
          "character": 15
        },
        "end": {
          "line": 213,
          "character": 26
        }
      },
      "title": "vnode的init hooks"
    },
    {
      "file": "src/core/vdom/create-component.js",
      "line": 186,
      "description": "在创建VNode时候注册hooks.\n\n注意这里组件vnode的data开发者一般无法控制,是vue自治的.(因为是组件VNode,它只是个\"占位符\")",
      "selection": {
        "start": {
          "line": 186,
          "character": 25
        },
        "end": {
          "line": 186,
          "character": 29
        }
      },
      "title": "installComponentHooks"
    },
    {
      "file": "src/core/vdom/create-component.js",
      "line": 47,
      "description": "init hook中实例化了Vue组件\n紧接着组件实例调用$mount. 这样回到了 [最初的地方][首次渲染 - 1.vnode的生成#1]",
      "title": "createComponentInstanceForVnode"
    },
    {
      "file": "src/core/vdom/patch.js",
      "line": 221,
      "description": "回到这里,init hook完成后,这个vnode下的元素都已经创建完成.\n接着调用initComponent,内部会调用create hooks里面执行了attr,style等属性的初始化\n最后将这个vnode插入到父DOM元素",
      "selection": {
        "start": {
          "line": 222,
          "character": 9
        },
        "end": {
          "line": 222,
          "character": 22
        }
      },
      "title": "完成"
    }
  ],
  "ref": "dev"
}